(ns megastrike.gui.subs
  (:require
   [cljfx.api :as fx]
   [clojure.string :as str]
   [megastrike.battle-force :as battle-force]
   [megastrike.board :as board]
   [megastrike.movement :as movement]))

(defn title-string
  [context]
  (let [forces (fx/sub-val context :forces)
        bf (get forces (first (fx/sub-val context :turn-order)))
        phase (fx/sub-val context :current-phase)
        turn (fx/sub-val context :turn-number)]
    (if (and bf phase turn)
      (str "Megastrike | " (battle-force/to-str bf) " | " (str/capitalize (name phase)) " Phase | Turn #" turn)
      "Megastrike")))

(defn units
  "Returns the map containing all units from the context. The map key is generated by running `(:id u)` where u is the unit map."
  [context]
  (fx/sub-val context :units))

(defn active-id
  "Returns the ID of the active unit. For use in lookups."
  [context]
  (fx/sub-val context :active-unit))

(defn active-unit
  "Returns the actual unit which corresponds to the ID returned by `active-id'."
  [context]
  (get (units context) (active-id context)))

(defn deployed-units
  [context]
  (filter movement/deployed? (vals (units context))))

(defn forces
  [context]
  (fx/sub-val context :forces))

(defn round-report
  [context]
  (fx/sub-val context :round-report))

(defn turn-number
  [context]
  (fx/sub-val context :turn-number))

(defn phase
  [context]
  (fx/sub-val context :current-phase))

(defn turn-order
  [context]
  (fx/sub-val context :turn-order))

(defn current-forces
  [context]
  (filter #(= (:unit/battle-force %) (first (turn-order context))) (vals (units context))))

(defn units-by-force
  [context]
  (group-by :unit/battle-force (vals (units context))))

(defn layout
  [context]
  (fx/sub-val context :layout))

(defn board
  [context]
  (fx/sub-val context :game-board))

(defn tiles
  [context]
  (board/tiles (board context)))
